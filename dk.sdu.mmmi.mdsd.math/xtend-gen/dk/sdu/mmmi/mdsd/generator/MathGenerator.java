/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.External;
import dk.sdu.mmmi.mdsd.math.ExternalUse;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.Program;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = Iterators.<Program>filter(resource.getAllContents(), Program.class).next();
    MathGenerator.generateProgram(program, fsa);
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public static void generateProgram(final Program prog, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("math_expression/");
    String _name = prog.getName();
    _builder.append(_name);
    _builder.append(".java");
    fsa.generateFile(_builder.toString(), MathGenerator.generateMath(prog));
  }
  
  public static String generateMath(final Program prog) {
    final String name = prog.getName();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _generateScopingMechanism = MathGenerator.generateScopingMechanism();
    _builder.append(_generateScopingMechanism, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _generateAttributes = MathGenerator.generateAttributes(prog);
    _builder.append(_generateAttributes, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(name, "\t");
    _builder.append("(");
    {
      int _size = prog.getExt().size();
      boolean _notEquals = (_size != 0);
      if (_notEquals) {
        _builder.append("External external");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      int _size_1 = prog.getExt().size();
      boolean _notEquals_1 = (_size_1 != 0);
      if (_notEquals_1) {
        _builder.append("this.external = external;");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _generateCompute = MathGenerator.generateCompute(prog.getMath());
    _builder.append(_generateCompute, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      int _size_2 = prog.getExt().size();
      boolean _notEquals_2 = (_size_2 != 0);
      if (_notEquals_2) {
        String _generateExternalInterface = MathGenerator.generateExternalInterface(prog);
        _builder.append(_generateExternalInterface, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String generateAttributes(final Program prog) {
    final MathExp math = prog.getMath();
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Binding> _variables = math.getVariables();
      for(final Binding m : _variables) {
        _builder.append("public int ");
        String _name = m.getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      int _size = prog.getExt().size();
      boolean _notEquals = (_size != 0);
      if (_notEquals) {
        _builder.append("private External external;");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public static String generateCompute(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public void compute() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Scope scope0 = new Scope();");
    _builder.newLine();
    {
      EList<Binding> _variables = math.getVariables();
      for(final Binding v : _variables) {
        _builder.append("\t");
        String _generateBinding = MathGenerator.generateBinding(v, Integer.valueOf(0));
        _builder.append(_generateBinding, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected static String _generateBinding(final VarBinding bind, final Integer scopeLevel) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    String _generateScopes = MathGenerator.generateScopes(bind.getExpression(), Integer.valueOf(0));
    _builder.append(_generateScopes);
    _builder.newLineIfNotEmpty();
    String ret = _builder.toString();
    String _ret = ret;
    StringConcatenation _builder_1 = new StringConcatenation();
    String _name = bind.getName();
    _builder_1.append(_name);
    _builder_1.append(" = ");
    String _generateExpression = MathGenerator.generateExpression(bind.getExpression(), Integer.valueOf(0));
    _builder_1.append(_generateExpression);
    _builder_1.append(";");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("scope0.vars.put(\"");
    String _name_1 = bind.getName();
    _builder_1.append(_name_1);
    _builder_1.append("\", ");
    String _name_2 = bind.getName();
    _builder_1.append(_name_2);
    _builder_1.append(");");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("}");
    _builder_1.newLine();
    ret = (_ret + _builder_1);
    return ret;
  }
  
  protected static String _generateBinding(final LetBinding bind, final Integer scopeLevel) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Scope scope");
    _builder.append(scopeLevel);
    _builder.append(" = new Scope();");
    _builder.newLineIfNotEmpty();
    _builder.append("scope");
    _builder.append(scopeLevel);
    _builder.append(".vars.put(\"");
    String _name = bind.getName();
    _builder.append(_name);
    _builder.append("\", ");
    String _generateExpression = MathGenerator.generateExpression(bind.getBinding(), Integer.valueOf(((scopeLevel).intValue() - 1)));
    _builder.append(_generateExpression);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("scope");
    _builder.append(scopeLevel);
    _builder.append(".parentScope = scope");
    _builder.append(((scopeLevel).intValue() - 1));
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    final String ret = _builder.toString();
    return ret;
  }
  
  public static String generateExpression(final Expression exp, final Integer scopeLevel) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      String _generateExpression = MathGenerator.generateExpression(((Plus)exp).getLeft(), scopeLevel);
      _builder.append(_generateExpression);
      _builder.append("+");
      String _generateExpression_1 = MathGenerator.generateExpression(((Plus)exp).getRight(), scopeLevel);
      _builder.append(_generateExpression_1);
      _switchResult = _builder.toString();
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = MathGenerator.generateExpression(((Minus)exp).getLeft(), scopeLevel);
        _builder.append(_generateExpression);
        _builder.append("-");
        String _generateExpression_1 = MathGenerator.generateExpression(((Minus)exp).getRight(), scopeLevel);
        _builder.append(_generateExpression_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = MathGenerator.generateExpression(((Mult)exp).getLeft(), scopeLevel);
        _builder.append(_generateExpression);
        _builder.append("*");
        String _generateExpression_1 = MathGenerator.generateExpression(((Mult)exp).getRight(), scopeLevel);
        _builder.append(_generateExpression_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = MathGenerator.generateExpression(((Div)exp).getLeft(), scopeLevel);
        _builder.append(_generateExpression);
        _builder.append("/");
        String _generateExpression_1 = MathGenerator.generateExpression(((Div)exp).getRight(), scopeLevel);
        _builder.append(_generateExpression_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof MathNumber) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        int _value = ((MathNumber)exp).getValue();
        _builder.append(_value);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Parenthesis) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _generateExpression = MathGenerator.generateExpression(((Parenthesis)exp).getExp(), scopeLevel);
        _builder.append(_generateExpression);
        _builder.append(")");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof VariableUse) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("scope");
        _builder.append(scopeLevel);
        _builder.append(".getVar(\"");
        String _name = ((VariableUse)exp).getRef().getName();
        _builder.append(_name);
        _builder.append("\")");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof LetBinding) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = MathGenerator.generateExpression(((LetBinding)exp).getBody(), Integer.valueOf(((scopeLevel).intValue() + 1)));
        _builder.append(_generateExpression);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof ExternalUse) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("external.");
        String _name = ((ExternalUse)exp).getRef().getName();
        _builder.append(_name);
        _builder.append("(");
        final Function1<Expression, String> _function = (Expression e) -> {
          return MathGenerator.generateExpression(e, scopeLevel);
        };
        String _join = IterableExtensions.join(ListExtensions.<Expression, String>map(((ExternalUse)exp).getParams(), _function), ", ");
        _builder.append(_join);
        _builder.append(")");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _switchResult = _builder.toString();
    }
    return _switchResult;
  }
  
  public static String generateScopes(final Expression exp, final Integer scopeLevel) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      String _generateScopes = MathGenerator.generateScopes(((Plus)exp).getLeft(), scopeLevel);
      _builder.append(_generateScopes);
      _builder.append(" ");
      String _generateScopes_1 = MathGenerator.generateScopes(((Plus)exp).getRight(), scopeLevel);
      _builder.append(_generateScopes_1);
      _switchResult = _builder.toString();
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateScopes = MathGenerator.generateScopes(((Minus)exp).getLeft(), scopeLevel);
        _builder.append(_generateScopes);
        _builder.append(" ");
        String _generateScopes_1 = MathGenerator.generateScopes(((Minus)exp).getRight(), scopeLevel);
        _builder.append(_generateScopes_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateScopes = MathGenerator.generateScopes(((Mult)exp).getLeft(), scopeLevel);
        _builder.append(_generateScopes);
        _builder.append(" ");
        String _generateScopes_1 = MathGenerator.generateScopes(((Mult)exp).getRight(), scopeLevel);
        _builder.append(_generateScopes_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateScopes = MathGenerator.generateScopes(((Div)exp).getLeft(), scopeLevel);
        _builder.append(_generateScopes);
        _builder.append(" ");
        String _generateScopes_1 = MathGenerator.generateScopes(((Div)exp).getRight(), scopeLevel);
        _builder.append(_generateScopes_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Parenthesis) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateScopes = MathGenerator.generateScopes(((Parenthesis)exp).getExp(), scopeLevel);
        _builder.append(_generateScopes);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof LetBinding) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateBinding = MathGenerator.generateBinding(((Binding)exp), Integer.valueOf(((scopeLevel).intValue() + 1)));
        _builder.append(_generateBinding);
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        String _generateScopes = MathGenerator.generateScopes(((LetBinding)exp).getBody(), Integer.valueOf(((scopeLevel).intValue() + 1)));
        _builder.append(_generateScopes, "\t\t\t");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof ExternalUse) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        final Function1<Expression, String> _function = (Expression p) -> {
          return MathGenerator.generateScopes(p, scopeLevel);
        };
        String _join = IterableExtensions.join(ListExtensions.<Expression, String>map(((ExternalUse)exp).getParams(), _function), "\n");
        _builder.append(_join);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _switchResult = _builder.toString();
    }
    return _switchResult;
  }
  
  public static String generateScopingMechanism() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Scope {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HashMap<String, Integer> vars = new HashMap<String, Integer>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Scope parentScope = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Integer getVar(String n) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Integer i = vars.get(n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(i == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(parentScope == null)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return parentScope.getVar(n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String generateExternalInterface(final Program prog) {
    int paramNumber = 0;
    Map<String, ArrayList<String>> params = new HashMap<String, ArrayList<String>>();
    EList<Expression> _ext = prog.getExt();
    for (final Expression e : _ext) {
      {
        ArrayList<String> paramStrings = new ArrayList<String>();
        params.put(((External) e).getName(), paramStrings);
        EList<String> _params = ((External) e).getParams();
        for (final String p : _params) {
          {
            final ArrayList<String> temp = params.get(((External) e).getName());
            StringConcatenation _builder = new StringConcatenation();
            _builder.append(p);
            _builder.append(" p");
            int _plusPlus = paramNumber++;
            _builder.append(_plusPlus);
            temp.add(_builder.toString());
          }
        }
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public interface External {");
    _builder.newLine();
    {
      EList<Expression> _ext_1 = prog.getExt();
      for(final Expression e_1 : _ext_1) {
        _builder.append("\t");
        _builder.append("public int ");
        String _name = ((External) e_1).getName();
        _builder.append(_name, "\t");
        _builder.append("(");
        String _join = IterableExtensions.join(params.get(((External) e_1).getName()), ",");
        _builder.append(_join, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String generateBinding(final Binding bind, final Integer scopeLevel) {
    if (bind instanceof LetBinding) {
      return _generateBinding((LetBinding)bind, scopeLevel);
    } else if (bind instanceof VarBinding) {
      return _generateBinding((VarBinding)bind, scopeLevel);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(bind, scopeLevel).toString());
    }
  }
}
